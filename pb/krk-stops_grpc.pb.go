// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// KrkStopsClient is the client API for KrkStops service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KrkStopsClient interface {
	GetAirly(ctx context.Context, in *Installation, opts ...grpc.CallOption) (*Airly, error)
	FindNearestAirlyInstallation(ctx context.Context, in *InstallationLocation, opts ...grpc.CallOption) (*Installation, error)
	GetAirlyInstallation(ctx context.Context, in *Installation, opts ...grpc.CallOption) (*Installation, error)
	GetDepartures(ctx context.Context, in *Stop, opts ...grpc.CallOption) (KrkStops_GetDeparturesClient, error)
	SearchStops(ctx context.Context, in *StopSearch, opts ...grpc.CallOption) (KrkStops_SearchStopsClient, error)
}

type krkStopsClient struct {
	cc grpc.ClientConnInterface
}

func NewKrkStopsClient(cc grpc.ClientConnInterface) KrkStopsClient {
	return &krkStopsClient{cc}
}

func (c *krkStopsClient) GetAirly(ctx context.Context, in *Installation, opts ...grpc.CallOption) (*Airly, error) {
	out := new(Airly)
	err := c.cc.Invoke(ctx, "/KrkStops/GetAirly", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *krkStopsClient) FindNearestAirlyInstallation(ctx context.Context, in *InstallationLocation, opts ...grpc.CallOption) (*Installation, error) {
	out := new(Installation)
	err := c.cc.Invoke(ctx, "/KrkStops/FindNearestAirlyInstallation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *krkStopsClient) GetAirlyInstallation(ctx context.Context, in *Installation, opts ...grpc.CallOption) (*Installation, error) {
	out := new(Installation)
	err := c.cc.Invoke(ctx, "/KrkStops/GetAirlyInstallation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *krkStopsClient) GetDepartures(ctx context.Context, in *Stop, opts ...grpc.CallOption) (KrkStops_GetDeparturesClient, error) {
	stream, err := c.cc.NewStream(ctx, &KrkStops_ServiceDesc.Streams[0], "/KrkStops/GetDepartures", opts...)
	if err != nil {
		return nil, err
	}
	x := &krkStopsGetDeparturesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type KrkStops_GetDeparturesClient interface {
	Recv() (*Departure, error)
	grpc.ClientStream
}

type krkStopsGetDeparturesClient struct {
	grpc.ClientStream
}

func (x *krkStopsGetDeparturesClient) Recv() (*Departure, error) {
	m := new(Departure)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *krkStopsClient) SearchStops(ctx context.Context, in *StopSearch, opts ...grpc.CallOption) (KrkStops_SearchStopsClient, error) {
	stream, err := c.cc.NewStream(ctx, &KrkStops_ServiceDesc.Streams[1], "/KrkStops/SearchStops", opts...)
	if err != nil {
		return nil, err
	}
	x := &krkStopsSearchStopsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type KrkStops_SearchStopsClient interface {
	Recv() (*Stop, error)
	grpc.ClientStream
}

type krkStopsSearchStopsClient struct {
	grpc.ClientStream
}

func (x *krkStopsSearchStopsClient) Recv() (*Stop, error) {
	m := new(Stop)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// KrkStopsServer is the server API for KrkStops service.
// All implementations must embed UnimplementedKrkStopsServer
// for forward compatibility
type KrkStopsServer interface {
	GetAirly(context.Context, *Installation) (*Airly, error)
	FindNearestAirlyInstallation(context.Context, *InstallationLocation) (*Installation, error)
	GetAirlyInstallation(context.Context, *Installation) (*Installation, error)
	GetDepartures(*Stop, KrkStops_GetDeparturesServer) error
	SearchStops(*StopSearch, KrkStops_SearchStopsServer) error
	mustEmbedUnimplementedKrkStopsServer()
}

// UnimplementedKrkStopsServer must be embedded to have forward compatible implementations.
type UnimplementedKrkStopsServer struct {
}

func (UnimplementedKrkStopsServer) GetAirly(context.Context, *Installation) (*Airly, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAirly not implemented")
}
func (UnimplementedKrkStopsServer) FindNearestAirlyInstallation(context.Context, *InstallationLocation) (*Installation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindNearestAirlyInstallation not implemented")
}
func (UnimplementedKrkStopsServer) GetAirlyInstallation(context.Context, *Installation) (*Installation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAirlyInstallation not implemented")
}
func (UnimplementedKrkStopsServer) GetDepartures(*Stop, KrkStops_GetDeparturesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetDepartures not implemented")
}
func (UnimplementedKrkStopsServer) SearchStops(*StopSearch, KrkStops_SearchStopsServer) error {
	return status.Errorf(codes.Unimplemented, "method SearchStops not implemented")
}
func (UnimplementedKrkStopsServer) mustEmbedUnimplementedKrkStopsServer() {}

// UnsafeKrkStopsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KrkStopsServer will
// result in compilation errors.
type UnsafeKrkStopsServer interface {
	mustEmbedUnimplementedKrkStopsServer()
}

func RegisterKrkStopsServer(s grpc.ServiceRegistrar, srv KrkStopsServer) {
	s.RegisterService(&KrkStops_ServiceDesc, srv)
}

func _KrkStops_GetAirly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Installation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KrkStopsServer).GetAirly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KrkStops/GetAirly",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KrkStopsServer).GetAirly(ctx, req.(*Installation))
	}
	return interceptor(ctx, in, info, handler)
}

func _KrkStops_FindNearestAirlyInstallation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstallationLocation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KrkStopsServer).FindNearestAirlyInstallation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KrkStops/FindNearestAirlyInstallation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KrkStopsServer).FindNearestAirlyInstallation(ctx, req.(*InstallationLocation))
	}
	return interceptor(ctx, in, info, handler)
}

func _KrkStops_GetAirlyInstallation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Installation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KrkStopsServer).GetAirlyInstallation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/KrkStops/GetAirlyInstallation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KrkStopsServer).GetAirlyInstallation(ctx, req.(*Installation))
	}
	return interceptor(ctx, in, info, handler)
}

func _KrkStops_GetDepartures_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Stop)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KrkStopsServer).GetDepartures(m, &krkStopsGetDeparturesServer{stream})
}

type KrkStops_GetDeparturesServer interface {
	Send(*Departure) error
	grpc.ServerStream
}

type krkStopsGetDeparturesServer struct {
	grpc.ServerStream
}

func (x *krkStopsGetDeparturesServer) Send(m *Departure) error {
	return x.ServerStream.SendMsg(m)
}

func _KrkStops_SearchStops_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StopSearch)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KrkStopsServer).SearchStops(m, &krkStopsSearchStopsServer{stream})
}

type KrkStops_SearchStopsServer interface {
	Send(*Stop) error
	grpc.ServerStream
}

type krkStopsSearchStopsServer struct {
	grpc.ServerStream
}

func (x *krkStopsSearchStopsServer) Send(m *Stop) error {
	return x.ServerStream.SendMsg(m)
}

// KrkStops_ServiceDesc is the grpc.ServiceDesc for KrkStops service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KrkStops_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "KrkStops",
	HandlerType: (*KrkStopsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAirly",
			Handler:    _KrkStops_GetAirly_Handler,
		},
		{
			MethodName: "FindNearestAirlyInstallation",
			Handler:    _KrkStops_FindNearestAirlyInstallation_Handler,
		},
		{
			MethodName: "GetAirlyInstallation",
			Handler:    _KrkStops_GetAirlyInstallation_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetDepartures",
			Handler:       _KrkStops_GetDepartures_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SearchStops",
			Handler:       _KrkStops_SearchStops_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pb/krk-stops.proto",
}
